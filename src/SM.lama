-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case insns of
    READ -> (
      var newWorld = readWorld(c[2])
      [newWorld[0] : c[0], c[1], newWorld[1]]
    ) |
    -- stack ?top : ?end
    WRITE -> [?end, c[1], writeWorld (?top, c[2])] |
    -- stack ?2 : ?1 : ?end
    BINOP (s) -> [evalBinop(s, ?1, ?2) : ?end, c[1], c[2]] |
    LD (x) -> [c[1] (x) : c[0], c[1], c[2]] |
    -- stack ?top : ?end
    ST (x) -> [?end, c[1] <- [x, ?top], c[1], c[2]] |
    CONST (n) -> [n : c[0], c[1], c[2]]
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  failure ("compileExpr not implemented\n")
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  failure ("compileSM not implemented\n")
}
